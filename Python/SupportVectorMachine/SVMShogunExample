#from shogun.Features import *
from shogun import Features
from shogun.Kernel import *
from shogun.Classifier import *
from shogun.Evaluation import *
from numpy import *
from numpy.random import randn
from shogun.Kernel import GaussianKernel
#help(GaussianKernel)
dist=0.5
traindata_real = concatenate((randn(2,100)-dist, randn(2,100)+dist), axis=1)
testdata_real = concatenate((randn(2,100)-dist, randn(2,100)+dist), axis=1)
train_labels = concatenate((-ones(100), ones(100)))
test_labels = concatenate((-ones(100), ones(100)))

feats_train = RealFeatures(traindata_real)
feats_test = RealFeatures(testdata_real)

width = 2
kernel = GaussianKernel(feats_train, feats_train, width)
km = kernel.get_kernel_matrix()
#help(Labels)
labels = BinaryLabels(train_labels)
labels_test = BinaryLabels(test_labels)

C = 1.0
svm = LibSVM(C, kernel, labels)
svm.train()

output = svm.apply(feats_test)
output_vector = output.get_labels()

# pm = PerformanceMeasures(labels_test, output)
# acc = pm.get_accuracy()
# roc = pm.get_auROC()
# fms = pm.get_fmeasure()
#use AccuracyMeasure to get accuracy
acc=AccuracyMeasure()
acc.evaluate(output,labels_test)
accuracy=acc.get_accuracy()*100
print('Accuracy(%):', accuracy)